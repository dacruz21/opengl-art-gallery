uniform vec3 cameraPosition;

uniform float specularIntensity;
uniform float specularExponent;

struct BaseLight {
	vec3 color;
	float intensity;
};

struct Attenuation { // attenuation formula is a simple quadratic in the form of (exponent * distance^2 + linear * distance + constant) (ex^2 + lx + c)
	float constant;
	float linear;
	float exponent;
};

struct DirectionalLight {
	BaseLight base;
	vec3 direction;
};

struct PointLight {
	BaseLight base;
	Attenuation atten;
	vec3 position;
	float range;
};

struct SpotLight {
	PointLight pointLight;
	vec3 direction;
	float cutoff;
};

vec4 calcLight(BaseLight base, vec3 direction, vec3 normal, vec3 worldPosition) {
	float diffuseFactor = dot(normal, -direction);

	vec4 diffuseColor = vec4(0,0,0,0);
	vec4 specularColor = vec4(0,0,0,0);

	if (diffuseFactor > 0) {
		diffuseColor = vec4(base.color, 1.0) * base.intensity * diffuseFactor;

		vec3 directionToCamera = normalize(cameraPosition - worldPosition);
//		vec3 reflectDirection = normalize(reflect(direction, normal)); // phong
		vec3 halfDirection = normalize(directionToCamera - direction); // blend-phong

		float specularFactor = dot(halfDirection, normal); // blend-phong
//		float specularFactor = dot(directionToCamera, reflectDirection); // phong
		specularFactor = pow(specularFactor, specularExponent);

		if (specularFactor > 0 && base.intensity > 0) {
			specularColor = vec4(base.color, 1.0) * specularIntensity * specularFactor;
		}
	}

	return diffuseColor + specularColor;
}

vec4 calcPointLight(PointLight pointLight, vec3 normal, vec3 worldPosition) {
	vec3 lightDirection = worldPosition - pointLight.position;
	float distanceToPoint = length(lightDirection); // put this in a var so we can normalize direction

	if (distanceToPoint > pointLight.range) {
		return vec4(0,0,0,0);
	}

	lightDirection = normalize(lightDirection);

	// standard light calculation for a light, direction, and normal
	vec4 color = calcLight(pointLight.base, lightDirection, normal, worldPosition);

	// attenuate the color
	float attenuation = pointLight.atten.constant +
						pointLight.atten.linear * distanceToPoint +
						pointLight.atten.exponent * distanceToPoint * distanceToPoint +
						0.0001; // attenuation could actually equal zero, causing a div by 0 error, so add a really small float to the atten

	return color / attenuation;
}

vec4 calcSpotLight(SpotLight spotLight, vec3 normal, vec3 worldPosition) {
	vec3 lightDirection = normalize(worldPosition - spotLight.pointLight.position);
	float spotFactor = dot(lightDirection, spotLight.direction);

	vec4 color = vec4(0,0,0,0);

	if (spotFactor > spotLight.cutoff) {
		color = calcPointLight(spotLight.pointLight, normal, worldPosition) *
				(1.0 - (1.0 - spotFactor) / (1.0 - spotLight.cutoff));
	}

	return color;
}

vec4 calcDirectionalLight(DirectionalLight directionalLight, vec3 normal, vec3 worldPosition) {
	return calcLight(directionalLight.base, -directionalLight.direction, normal, worldPosition);
}